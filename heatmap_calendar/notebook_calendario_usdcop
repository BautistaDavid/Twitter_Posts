{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Dolar_Calendario.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNGFKn5OR8fsHs6IKTZgTa6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/BautistaDavid/Twitter_Posts/blob/main/heatmap_calendar/notebook_calendario_usdcop\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install july\n",
        "import pandas as pd \n",
        "from july.utils import date_range\n",
        "import matplotlib.pyplot as plt \n",
        "import calendar\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "Yn23_0ZunVWm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('https://raw.githubusercontent.com/BautistaDavid/Twitter_Posts/main/heatmap_calendar/USD_COP.csv').reset_index()\n",
        "df.columns = [col.lower() for col in df.columns]\n",
        "df.sort_values(by='index',ascending=False,inplace=True)\n",
        "df['price'] = [''.join(number.split(',')) for number in df['price']]\n",
        "df['price'] = pd.to_numeric(df['price'],errors='coerce')\n",
        "df['date'] = pd.to_datetime(df['date'])\n",
        "df = df[['date','price','open','high','low']]\n",
        "\n",
        "# Vamos a crear dos dataframes, unos con todos los dias incluyendo fines de semana y el otro con los datos, despues se hara un merge }\n",
        "# y se rellenara los valores nulos para los fines de semana con los mimos valores  del viernes anterior\n",
        "df1 = df\n",
        "df2 = pd.DataFrame({'date':date_range(\"2022-01-01\", \"2022-07-11\")})\n",
        "df2['date'] = pd.to_datetime(df2['date'])\n",
        "\n",
        "df = pd.merge(df1,df2,on='date',how='outer')\n",
        "df = df.sort_values(by='date').reset_index().drop([0,1]).reset_index().drop(columns='level_0')\n",
        "df['weekend'] = df['price'].isna()\n",
        "prices = []\n",
        "for i in range(len(df)):\n",
        "  if df.loc[i,'weekend'] == True and df.loc[i,'date'].weekday()==6:\n",
        "    prices.append(df.loc[i-2,'price'])\n",
        "  elif df.loc[i,'weekend'] == True and df.loc[i,'date'].weekday()==5:\n",
        "    prices.append(df.loc[i-1,'price'])\n",
        "  else:\n",
        "    prices.append(df.loc[i,'price'])\n",
        "\n",
        "df['price'] = prices"
      ],
      "metadata": {
        "id": "Q8CVZ_1gn7ZD"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ahora construimos los dos vectores que usaremos para graficar, el de fechas y el de valores\n",
        "dates = date_range(\"2022-01-01\", \"2022-07-11\")\n",
        "data = df['price']"
      ],
      "metadata": {
        "id": "6bj7PljtcHAT"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def heatmap_calendar(year, valores):\n",
        "    csfont = {'fontname':'Comic Sans MS'}\n",
        "    hfont = {'fontname':'DejaVu Sans'}\n",
        "\n",
        "    dias_semana = ['L', 'M', 'M', 'J', 'V', 'S', 'D']\n",
        "    nombres_meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio']\n",
        "    maximo_semanas_mes = 6\n",
        "    meses = 7\n",
        "    columnas = 3\n",
        "    filas = 3\n",
        "\n",
        "    # Creamos un gráfico para cada més del año\n",
        "    fig, ax = plt.subplots(filas, columnas, figsize=(4*columnas, 4*filas))\n",
        "\n",
        "    # Para facilitar la iteración convertimos la tabla 2D en una lista 1D\n",
        "    axs = np.array(ax).reshape(-1)\n",
        "\n",
        "    numero_valores = len(valores)\n",
        "    maximo = max(valores)\n",
        "    puntero_dia_actual = 0\n",
        "\n",
        "    # Repetimos el proceso para cada mes\n",
        "    for mes in range(meses):\n",
        "        # Averiguamos que día de la semana empieza el mes y cuantos días tiene\n",
        "        dia_semana, dias_mes = calendar.monthrange(year, mes + 1)\n",
        "\n",
        "        # Creamos un array nullo como plantilla para ir colocando los valores del mes\n",
        "        plantilla_mes = np.empty((maximo_semanas_mes, len(dias_semana)))\n",
        "        plantilla_mes[:] = np.nan\n",
        "\n",
        "        # Mostramos nombre del mes\n",
        "        axs[mes].set_title(nombres_meses[mes]+'\\n', fontsize=16, y=1,fontweight='bold',**hfont) #y=-0.2#\n",
        "\n",
        "        # Colocamos etiqueta de días de la semana.\n",
        "        axs[mes].set_xticks(np.arange(len(dias_semana)))\n",
        "        axs[mes].set_xticklabels(dias_semana, fontsize=10, fontweight='bold', color='#555555')\n",
        "        axs[mes].set_yticklabels([])\n",
        "        axs[mes].xaxis.tick_top()\n",
        "\n",
        "        # Ocultamos las marcas de los ejes\n",
        "        axs[mes].tick_params(axis=u'both', which=u'both', length=0)  # remove tick marks\n",
        "\n",
        "        # Dibujamos rejilla blanca para separar casillas\n",
        "        axs[mes].set_xticks(np.arange(-.5, len(dias_semana), 1), minor=True)\n",
        "        axs[mes].set_yticks(np.arange(-.5, maximo_semanas_mes, 1), minor=True)\n",
        "        axs[mes].grid(which='minor', color='w', linestyle='-', linewidth=2)\n",
        "\n",
        "        # Ocultamos cada uno de los lados del marco que rodea la cuadrícula.\n",
        "        for lado in ['left', 'right', 'bottom', 'top']:\n",
        "            axs[mes].spines[lado].set_visible(False)\n",
        "\n",
        "        # Empezamos a rellenar cada mes desde la primera fila y desde el día de la\n",
        "        # semana en la que empieza el mes        \n",
        "        fila = 0\n",
        "        columna = dia_semana\n",
        "\n",
        "        # Copiamos tantos valores de nuestra lista como días tiene el mes\n",
        "        for n in range(dias_mes):\n",
        "            if puntero_dia_actual < numero_valores:\n",
        "                plantilla_mes[fila][columna] = valores[puntero_dia_actual]\n",
        "\n",
        "            # Conservamos cual es el próximo valor de nuestra lista a procesar\n",
        "            puntero_dia_actual += 1\n",
        "\n",
        "            # Controlamos cuando se produce cambio de semana\n",
        "            if columna == 6:\n",
        "                columna = 0\n",
        "                fila +=1\n",
        "            else:\n",
        "                columna += 1\n",
        "\n",
        "        # Mostramos los valores del mes        \n",
        "        im = axs[mes].imshow(plantilla_mes, cmap='YlOrRd', vmin=min(valores), vmax=maximo,)\n",
        "    \n",
        "    # escondemos graficas que no vamos a usar \n",
        "    ax[2,1].axis('off')\n",
        "    ax[2,2].axis('off')\n",
        "\n",
        "    texto = 'Elaborado por: David Bautista (@PipeBau_)\\nDatos extraidos de: https://es.investing.com/ \\n* Julio 11 2022\\nValores en COP'\n",
        "\n",
        "    ax[2,1].text(x=0,y=0.7,s=texto)\n",
        "    \n",
        "\n",
        "    bar = fig.colorbar(im, ax=ax[0,1:2], shrink=0.6,location='top',anchor=(0.5,4),ticks=[min(valores),np.percentile(valores,80),max(valores)],) # ax[0:2,2]\n",
        "    \n",
        "    # Colocamos el año del calendario y reajustamos el conjunto para dejas\n",
        "    # un pequeño margen alrededor        \n",
        "    fig.suptitle(\"\\n\" + 'Comportamiento del tipo de cambio USD/COP\\n durante el año corrido 2022', fontsize=18,y=1.08,fontweight='bold',**hfont)\n",
        "    plt.subplots_adjust(left=0.04, right=0.96, top=0.88, bottom=0.05)\n",
        "\n",
        "    plt.savefig('grafico_usd.png',dpi=300, bbox_inches='tight')\n",
        "    \n",
        "    plt.show()\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    heatmap_calendar(2022, valores=np.array(data))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 921
        },
        "id": "84S_qaoOgmFp",
        "outputId": "0ec66fa7-1c01-416b-bc0b-202acce50774"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x864 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "oX0IlbdIGB-D"
      },
      "execution_count": 11,
      "outputs": []
    }
  ]
}